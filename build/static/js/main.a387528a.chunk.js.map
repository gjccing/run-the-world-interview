{"version":3,"sources":["hooks/useLocalStream.ts","hooks/useDevice.ts","components/ChannelInfoFormModal/ChannelInfoFormModal.tsx","hooks/useRemoteStream.ts","hooks/useClient.ts","components/ControlPanel/ControlPanel.tsx","App.tsx","index.tsx"],"names":["StreamState","type","useState","cameraList","setCameraList","useEffect","Promise","res","AgoraRTC","getDevices","then","devices","filter","device","kind","ChannelInfoFormModal","visible","defaultValues","onJoin","showAdvance","setShowAdvance","Form","useForm","form","useDevice","microphoneList","setFieldsValue","cameraId","deviceId","microphoneId","title","okText","onOk","validateFields","values","cancelButtonProps","style","display","className","name","layout","onFinish","Item","label","initialValue","appId","rules","required","message","channel","token","onClick","uid","step","options","map","index","value","Option","Group","ClientState","ControlPanel","client","channelInfo","onLeave","streamRef","useRef","WAITING","streamState","setStreamState","publishState","setPublishState","isMute","setIsMute","a","INITIALING","localStream","createStream","streamID","video","audio","screen","videoProfile","setVideoProfile","rej","init","current","publish","READY","on","published","evt","off","stream","unpublished","unpublish","leave","close","mute","muteAudio","unmute","unmuteAudio","useLocalStream","subscribe","subscribed","isPlaying","stop","undefined","useRemoteStream","remoteStreamRef","remoteStreamState","remoteLeave","RemoteStreamState","fit","shape","icon","AudioMutedOutlined","AudioOutlined","danger","PhoneOutlined","UploadOutlined","App","setChannelInfo","clientRef","WAITING_CHANNEL_INFO","clientState","setClientState","join","createClient","mode","codec","JOINED","useClient","size","data","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a387528a.chunk.js","sourcesContent":["import { useState, useRef, useEffect } from 'react';\nimport AgoraRTC, { Client, Stream } from 'agora-rtc-sdk';\n\nexport enum StreamState {\n  WAITING,\n  INITIALING,\n  READY,\n}\n\nexport default (client: Client, channelInfo: IChannelInfo) => {\n  const streamRef = useRef<Stream>()\n  const [streamState, setStreamState] = useState<StreamState>(StreamState.WAITING)\n  const [publishState, setPublishState] = useState<boolean>(false)\n  const [isMute, setIsMute] = useState<boolean>(false)\n  \n  useEffect(() => {\n    if (client) {\n      (async () => {\n        setStreamState(StreamState.INITIALING)\n        const localStream = AgoraRTC.createStream({\n          streamID: channelInfo.uid || 12345,\n          video: true,\n          audio: true,\n          screen: false,\n          cameraId: channelInfo.cameraId,\n          microphoneId: channelInfo.microphoneId,\n        });\n        if (channelInfo.videoProfile)\n          localStream.setVideoProfile(channelInfo.videoProfile)\n        await new Promise((res, rej) =>\n          localStream.init(res, rej));\n        streamRef.current = localStream\n        publish();\n        setStreamState(StreamState.READY)\n      })()\n    }\n  }, [client])\n\n  const publish = async () => {\n    await new Promise((res, rej) => {\n      if (streamRef.current) {\n        client.publish(streamRef.current, rej)\n        const published = (evt: any) => {\n          client.off('stream-published', published)\n          res(evt.stream)\n        }\n        client.on('stream-published', published)\n      }\n    });\n    setPublishState(true)\n  }\n  const unpublished = async () => {\n    await new Promise((res, rej) => {\n      if (streamRef.current) {\n        client.unpublish(streamRef.current, rej)\n        const unpublished = (evt: any) => {\n          client.off('stream-unpublished', unpublished)\n          res(evt.stream)\n        }\n        client.on('stream-unpublished', unpublished)\n      }\n    });\n    setPublishState(false)\n  }\n  return {\n    streamRef,\n    streamState,\n    publishState,\n    isMute,\n    leave: async () => {\n      streamRef.current?.close();\n      await unpublished()\n      setStreamState(StreamState.WAITING)\n    },\n    publish,\n    unpublished,\n    mute: () => {\n      streamRef.current?.muteAudio()\n      setIsMute(true)\n    },\n    unmute: () => {\n      streamRef.current?.unmuteAudio()\n      setIsMute(false)\n    }\n  }\n}","import { useState, useEffect } from 'react';\nimport AgoraRTC from 'agora-rtc-sdk';\n\nexport default (type: string) => {\n  const [cameraList, setCameraList] = useState<AgoraRTC.MediaDeviceInfo[]>()\n  useEffect(() => {\n    new Promise(res => AgoraRTC.getDevices(res)).then(devices => {\n      setCameraList(\n        (devices as AgoraRTC.MediaDeviceInfo[]).filter(device => !type || device.kind === type)\n      )\n    })\n  }, [])\n  return cameraList\n}","import React, { useState, useEffect, FunctionComponent } from 'react';\nimport { Modal, Form, Input, Divider, Button, Select, Radio } from 'antd';\nimport useDevice from '../../hooks/useDevice';\nimport './ChannelInfoFormModal.css';\n\nexport interface IChannelInfo {\n  appId: string;\n  channel: string;\n  token: string;\n  uid: number | string | null;\n  cameraId: string;\n  microphoneId: string;\n  videoProfile: string;\n  mode: \"live\" | \"rtc\";\n  codec: \"vp8\" | \"h264\";\n}\n\nexport interface IChannelInfoFormModalProp {\n  visible: boolean;\n  defaultValues?: IChannelInfo;\n  onJoin: (data: IChannelInfo) => void;\n}\n\nconst ChannelInfoFormModal: FunctionComponent<IChannelInfoFormModalProp> = ({\n  visible,\n  defaultValues,\n  onJoin,\n}) => {\n  const [showAdvance, setShowAdvance] = useState<boolean>(false);\n  const [form] = Form.useForm<IChannelInfo>();\n  const cameraList = useDevice('videoinput')\n  const microphoneList = useDevice('audioinput')\n  useEffect(() => { form.setFieldsValue({ cameraId: cameraList?.[0].deviceId }) }, [cameraList])\n  useEffect(() => { form.setFieldsValue({ microphoneId: microphoneList?.[0].deviceId }) }, [microphoneList])\n  return (\n    <Modal\n      visible={visible}\n      title=\"Join a channel\"\n      okText=\"Join\"\n      onOk={() => {\n        form\n          .validateFields()\n          .then(values => onJoin(values as IChannelInfo));\n      }}\n      cancelButtonProps={{\n        style: { display: 'none' }\n      }}\n    >\n      <Form\n        form={form}\n        className=\"channel-info-form\"\n        name=\"basic\"\n        layout=\"vertical\"\n        onFinish={onJoin}\n      >\n        <Form.Item\n          label=\"App ID\"\n          name=\"appId\"\n          initialValue={defaultValues?.appId}\n          rules={[{ required: true, message: 'Please input App ID!' }]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Channel\"\n          name=\"channel\"\n          initialValue={defaultValues?.channel}\n          rules={[{ required: true, message: 'Please input Channel Name!' }]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Token\"\n          name=\"token\"\n          initialValue={defaultValues?.token}\n          rules={[{ required: true, message: 'Please input Token!' }]}\n        >\n          <Input />\n        </Form.Item>\n        <Divider>\n          <Button type=\"link\" onClick={() => setShowAdvance(!showAdvance)}>\n            {!showAdvance ? 'show' : 'hide'} advance setting\n          </Button>\n        </Divider>\n        <div className={`advance-setting ${showAdvance ? 'show' : 'hide'}`}>\n          <Form.Item\n            label=\"UID\"\n            name=\"uid\"\n            initialValue={defaultValues?.uid}\n          >\n            <Input type=\"number\" step=\"1\" />\n          </Form.Item>\n          <Form.Item\n            label=\"CAMERA\"\n            name=\"cameraId\"\n          >\n            <Select\n              options={cameraList?.map(({ deviceId, label }, index) =>\n                ({ value: deviceId, label: label || `camera-${index}` })\n              )}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"MICROPHONE\"\n            name=\"microphoneId\"\n          >\n            <Select\n              options={microphoneList?.map(({ deviceId, label }, index) =>\n                ({ value: deviceId, label: label || `camera-${index}` })\n              )}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"CAMERA RESOLUTION\"\n            name=\"videoProfile\"\n            initialValue={''}\n          >\n            <Select>\n              <Select.Option value=\"\">default</Select.Option>\n              <Select.Option value=\"480p_1\">480p</Select.Option>\n              <Select.Option value=\"720p_1\">720p</Select.Option>\n              <Select.Option value=\"1080p_1\">1080p</Select.Option>\n            </Select>\n          </Form.Item>\n          <Form.Item\n            label=\"MODE\"\n            name=\"mode\"\n            initialValue={'live'}\n          >\n            <Radio.Group>\n              <Radio value=\"live\">live</Radio>\n              <Radio value=\"rtc\">rtc</Radio>\n            </Radio.Group>\n          </Form.Item>\n          <Form.Item\n            label=\"CODEC\"\n            name=\"codec\"\n            initialValue={'h264'}\n          >\n            <Radio.Group>\n              <Radio value=\"h264\">h264</Radio>\n              <Radio value=\"vp8\">vp8</Radio>\n            </Radio.Group>\n          </Form.Item>\n        </div>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default ChannelInfoFormModal;","import { useState, useRef, useEffect } from 'react';\nimport { Client, Stream } from 'agora-rtc-sdk';\n\nexport enum StreamState {\n  WAITING,\n  INITIALING,\n  READY,\n}\n\nexport default (client: Client, channelInfo: IChannelInfo) => {\n  const streamRef = useRef<Stream>()\n  const [streamState, setStreamState] = useState<StreamState>(StreamState.WAITING)\n  \n  useEffect(() => {\n    if (client) {\n      (async () => {\n        setStreamState(StreamState.INITIALING)\n        client.on('stream-added', async (evt) => {\n          if (!streamRef.current) {\n            setStreamState(StreamState.INITIALING)\n            streamRef.current = await new Promise((res, rej) => {\n              client.subscribe(evt.stream, {} , rej)\n              const subscribed = () => {\n                client.off('stream-subscribed', subscribed)\n                res(evt.stream)\n              }\n              client.on('stream-subscribed', subscribed)\n            })\n            setStreamState(StreamState.READY)\n          }\n            \n        })\n        client.on('stream-removed', async (evt) => {\n          if(streamRef.current?.isPlaying()) {\n            streamRef.current?.stop()\n          }\n          streamRef.current = undefined\n          setStreamState(StreamState.WAITING)\n        })\n      })()\n    }\n  }, [client])\n\n  return {\n    streamRef,\n    streamState,\n    leave: () => {\n      if(streamRef.current?.isPlaying()) {\n        streamRef.current?.stop()\n      }\n      streamRef.current?.close();\n      setStreamState(StreamState.WAITING)\n    }\n  }\n}","import { useState, useRef } from 'react';\nimport AgoraRTC, { Client } from 'agora-rtc-sdk';\n\nexport enum ClientState {\n  WAITING_CHANNEL_INFO,\n  INITIALING,\n  JOINED,\n}\n\nexport default () => {\n  const clientRef = useRef<Client>()\n  const [clientState, setClientState] = useState<ClientState>(ClientState.WAITING_CHANNEL_INFO)\n  \n  return {\n    clientRef,\n    clientState,\n    join: async (channelInfo: IChannelInfo) => {\n      setClientState(ClientState.INITIALING)\n      clientRef.current = AgoraRTC.createClient({\n        mode: channelInfo.mode,\n        codec: channelInfo.codec\n      })\n      await new Promise((res, rej) =>\n        clientRef.current?.init(channelInfo.appId, res, rej))\n      await new Promise((res, rej) =>\n        clientRef.current?.join(channelInfo.token, channelInfo.channel, channelInfo.uid, res, rej))\n      setClientState(ClientState.JOINED)\n    },\n    leave: async () => {\n      await new Promise((res, rej) =>\n        clientRef.current?.leave(res, rej));\n      setClientState(ClientState.WAITING_CHANNEL_INFO)\n    }\n  }\n}","import React, { FunctionComponent } from 'react';\nimport { Button } from 'antd';\nimport {\n  AudioOutlined,\n  AudioMutedOutlined,\n  PhoneOutlined,\n  UploadOutlined,\n} from '@ant-design/icons';\nimport { Client } from 'agora-rtc-sdk';\nimport StreamPlayer from \"agora-stream-player\";\nimport useLocalStream, { StreamState } from '../../hooks/useLocalStream';\nimport useRemoteStream, { StreamState as RemoteStreamState } from '../../hooks/useRemoteStream';\n\nimport './ControlPanel.css';\n\ninterface IControlPanel {\n  client: Client\n  channelInfo: IChannelInfo\n  onLeave?: () => void\n}\n\nconst ControlPanel: FunctionComponent<IControlPanel> = ({\n  client,\n  channelInfo,\n  onLeave = () => {},\n}) => {\n  const {\n    streamRef,\n    streamState,\n    publishState,\n    isMute,\n    leave,\n    publish,\n    unpublished,\n    mute,\n    unmute,\n  } = useLocalStream(client, channelInfo)\n  const {\n    streamRef: remoteStreamRef,\n    streamState: remoteStreamState,\n    leave: remoteLeave,\n  } = useRemoteStream(client, channelInfo)\n  return (\n    <div className=\"control-panel\">\n      <div className=\"remote-stream\">\n        {\n          remoteStreamState === RemoteStreamState.READY &&\n          <StreamPlayer stream={remoteStreamRef.current} fit=\"cover\" label=\"remote\" />\n        }\n      </div>\n      <div className=\"bottom\">\n        <Button\n          shape=\"circle\"\n          icon={isMute ? <AudioMutedOutlined /> : <AudioOutlined />}\n          onClick={() => {\n            isMute ? unmute() : mute()\n          }}\n        />\n        <Button shape=\"circle\" danger icon={<PhoneOutlined />} onClick={async () => {\n          await leave()\n          await remoteLeave()\n          onLeave()\n        }} />\n        <Button\n          shape=\"circle\"\n          type={publishState ? 'default' : 'primary'}\n          icon={<UploadOutlined />} onClick={async () => {\n            publishState ? unpublished() : publish()\n          }}\n        />\n        <div className=\"local-stream\">\n          {\n            streamState === StreamState.READY &&\n            <StreamPlayer stream={streamRef.current} fit=\"contain\" label=\"local\" />\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ControlPanel;\n","import React, { useState, FunctionComponent } from 'react';\nimport { Spin } from 'antd';\nimport ChannelInfoFormModal, { IChannelInfo } from './components/ChannelInfoFormModal';\nimport ControlPanel from './components/ControlPanel';\nimport useClient, { ClientState } from './hooks/useClient';\n\nimport './App.css';\n\nconst App: FunctionComponent = () => {\n  const [channelInfo, setChannelInfo] = useState<IChannelInfo | null>(null)\n  const { clientRef, clientState, join, leave } = useClient()\n  return (\n    <div className=\"App\">\n      {(() => {\n        switch (clientState) {\n          case ClientState.WAITING_CHANNEL_INFO:\n          case ClientState.INITIALING:\n            return <Spin size=\"large\" />\n          default:\n            if (clientRef.current && channelInfo)\n              return <ControlPanel\n                client={clientRef.current}\n                channelInfo={channelInfo}\n                onLeave={() => { leave() }}\n              />\n        }\n      })()}\n      <ChannelInfoFormModal\n        visible={clientState === ClientState.WAITING_CHANNEL_INFO}\n        onJoin={(data) => {\n          setChannelInfo(data)\n          join(data)\n        }}\n      />\n    </div>\n  )\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}